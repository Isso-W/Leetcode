import java.util.*;

class Solution {
    public boolean isInArray(int[] nums,int target){
        int position = Arrays.binarySearch(nums, target);
        if(position >= 0){
            return true;
        }
        else{return false;}
    }
    public <T extends Comparable<T>> List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> output = new ArrayList<List<Integer>>();
        int length = nums.length;
        int listLength = 0;
        Arrays.sort(nums);
        for (int i = 0; i < length-2; i++){
            for (int j = i + 1; j < length-1; j++){
                if (isInArray(Arrays.copyOfRange(nums, j+1, length), (0-nums[i]-nums[j]))){
                    List<Integer> temp = Arrays.asList(nums[i], nums[j], (0-nums[i]-nums[j]));
                    Collections.sort(temp);
                    if (listLength == 0){
                        output.add(temp);
                        listLength++;
                    } else {
                        boolean bool = true;
                        for (int l = 0; l < listLength; l++){
                            if (output.get(l).equals(temp)){bool = false;}
                        }
                        if (bool){
                            output.add(temp);
                            listLength++;
                        }
                    }
                }
            }
        }
    return output;
    }
}
